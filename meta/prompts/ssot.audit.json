{
  "objective": "Audit the SSOT repo and emit a deterministic Markdown report to meta/SSOT_AUDIT.md covering versioning, schema hygiene, examples, codegen, preflight/CI parity, and docs guardrails.",
  "constraints": {
    "style": "KISS, deterministic, minimal deps",
    "python": "3.11",
    "schema_draft": "2020-12",
    "no_db_migrations": true,
    "output": "Markdown only; write to meta/SSOT_AUDIT.md; do not print to stdout"
  },
  "inputs": {
    "schemas": "jsonschema/*.schema.json",
    "examples": ["examples/*.json", "examples/**/*.json"],
    "version_json": "version.json",
    "py_typed": "python/src/synesthetic_schemas/py.typed",
    "ci": ".github/workflows/ci.yml",
    "makefile": "Makefile",
    "preflight": "preflight.sh",
    "codegen": ["codegen/gen_ts.sh", "scripts/ensure_codegen_clean.sh"],
    "validators": ["scripts/schema_lint.py", "scripts/normalize_schemas.py", "scripts/validate_examples.py"]
  },
  "phases": [
    { "id": "A1", "name": "Foundations" },
    { "id": "A2", "name": "Validation & Normalization" },
    { "id": "A3", "name": "Deterministic Codegen & CI" },
    { "id": "A4", "name": "Naming & Docs Hygiene" }
  ],
  "work_items": [
    {
      "id": "C1",
      "phase": "A1",
      "summary": "Single-source schema version",
      "deps": [],
      "touches": ["version.json", "scripts/lib/version.py", "codegen/lib/version.mjs"],
      "audit": [
        "Read version.json schemaVersion",
        "Scan tree for any occurrence of 'schemaVersion' outside version.json"
      ],
      "acceptance": [
        "Only version.json defines schemaVersion",
        "Helpers in Python/TS read the same value"
      ],
      "commands": ["rg -n \"schemaVersion\" -g '!version.json' || true"]
    },
    {
      "id": "C2",
      "phase": "A1",
      "summary": "Typed Python dist marker",
      "deps": [],
      "touches": ["python/src/synesthetic_schemas/py.typed"],
      "audit": ["Check that py.typed exists (empty file is valid)"],
      "acceptance": ["mypy/pyright can resolve inline types from installed wheel/sdist"],
      "commands": ["test -f python/src/synesthetic_schemas/py.typed"]
    },
    {
      "id": "C3",
      "phase": "A2",
      "summary": "Schema lint: $id uniqueness and draft",
      "deps": [],
      "touches": ["jsonschema/*.schema.json"],
      "audit": [
        "Every schema has a non-empty $id",
        "No duplicate $id across schemas",
        "Every schema declares $schema = https://json-schema.org/draft/2020-12/schema"
      ],
      "acceptance": [
        "Zero missing $id",
        "Zero duplicate $id",
        "Zero draft mismatches"
      ],
      "commands": []
    },
    {
      "id": "C4",
      "phase": "A2",
      "summary": "Examples reference schemas explicitly",
      "deps": [],
      "touches": ["examples/**/*.json"],
      "audit": ["All example JSON files include a top-level \"$schemaRef\" key"],
      "acceptance": ["scripts/validate_examples.py --strict passes over examples"],
      "commands": ["poetry run python scripts/validate_examples.py --strict --dir examples || true"]
    },
    {
      "id": "C5",
      "phase": "A3",
      "summary": "Deterministic codegen + CI parity",
      "deps": [],
      "touches": ["codegen/gen_ts.sh", "scripts/ensure_codegen_clean.sh", "Makefile", "preflight.sh", ".github/workflows/ci.yml"],
      "audit": [
        "codegen/gen_ts.sh present and repo-local (no npx --yes)",
        "scripts/ensure_codegen_clean.sh present and fails on drift",
        "Makefile + preflight.sh exist and mirror CI steps",
        "CI workflow invokes ./preflight.sh (or make preflight)"
      ],
      "acceptance": [
        "Codegen on a clean tree yields no diff",
        "CI and local preflight are identical in steps"
      ],
      "commands": []
    },
    {
      "id": "C6",
      "phase": "A4",
      "summary": "Naming & docs guardrails",
      "deps": [],
      "touches": ["jsonschema/*.schema.json", "README.md", "CONTRIBUTING.md", "scripts/validate_examples.py"],
      "audit": [
        "Search for dual-class tokens (RuleBundleSchema|ControlParameter|ControlBundleSchema)",
        "Scan for repeated defs (InputParameter|UniformDef) that should live in $defs",
        "Check that README.md and CONTRIBUTING.md exist and describe version bump + preflight"
      ],
      "acceptance": [
        "No dual-class hedging remains",
        "Repeated defs factored into $defs or justified",
        "Contributor docs explain version bump and preflight"
      ],
      "commands": [
        "rg -n \"RuleBundleSchema|ControlParameter|ControlBundleSchema\" || true",
        "rg -n \"InputParameter|UniformDef\" jsonschema || true"
      ]
    }
  ],
  "done_definition": [
    "meta/SSOT_AUDIT.md generated with frontmatter and sections: Objective, Constraints, Phases, Work Items, Done Definition, Findings",
    "No $id collisions or missing $id; all schemas use draft 2020-12",
    "All examples include $schemaRef and strict validation passes locally",
    "Codegen drift check passes on a clean tree",
    "CI calls preflight and local preflight is green",
    "README/CONTRIBUTING enable a new contributor to succeed via preflight"
  ]
}