{
  "objective": "Interrogate synesthetic-schemas for gaps preventing inline compute shader support inside the shader block (Option A, transparency-first).",
  "constraints": {
    "style": "KISS, deterministic, minimal deps",
    "schema_draft": "2020-12",
    "ssot": "synesthetic-schemas defines all shader payloads",
    "transparency": "shader block must support fragment and compute",
    "report_output": "meta/output/compute_shader_gap_report.md"
  },
  "current_capabilities": [
    "shader.json defines fragment_shader and vertex_shader as GLSL source fields",
    "shaderType enum is limited to 'fragment'",
    "input_parameters schema supports uniform bindings for fragment shaders",
    "uniforms array describes per-stage shader variables",
    "examples currently cover fragment shader assets only"
  ],
  "desired_state": [
    "shader.type enum supports 'fragment' and 'compute'",
    "shader.json defines compute_shader field for GLSL source",
    "dispatch parameters (x, y, z) schema-defined",
    "outputs array describes texture/buffer targets with type and format",
    "input_parameters and uniforms schema reusable across both fragment and compute",
    "examples include at least one canonical compute shader asset",
    "docs updated with schema fields and usage example",
    "gap interrogation produces human-readable report under meta/output/"
  ],
  "gap_analysis": [
    {
      "id": "S1",
      "summary": "shaderType enum does not include 'compute'",
      "touches": ["defs/common_defs/shaderType.json"]
    },
    {
      "id": "S2",
      "summary": "shader.json lacks compute_shader field for GLSL source",
      "touches": ["defs/shader.json"]
    },
    {
      "id": "S3",
      "summary": "No schema-defined fields for dispatch dimensions (x, y, z)",
      "touches": ["defs/shader.json"]
    },
    {
      "id": "S4",
      "summary": "No schema support for outputs (textures, buffers) in compute shaders",
      "touches": ["defs/shader.json", "defs/common_defs/texture.json"]
    },
    {
      "id": "S5",
      "summary": "No canonical compute shader example asset",
      "touches": ["examples/shaders/ComputeShader_Example.json"]
    },
    {
      "id": "S6",
      "summary": "Docs do not cover compute shader schema usage",
      "touches": ["docs/shaders.md"]
    },
    {
      "id": "S7",
      "summary": "No meta/output report documenting gaps and resolutions",
      "touches": ["meta/output/compute_shader_gap_report.md"]
    }
  ],
  "done_definition": [
    "shader.type enum validates 'fragment' and 'compute'",
    "shader.json defines compute_shader, dispatch, and outputs",
    "input_parameters/uniforms validated for compute stage",
    "Canonical compute shader example asset passes schema validation",
    "Docs updated with schema details and usage example",
    "Gap interrogation report exists under meta/output/compute_shader_gap_report.md"
  ]
}