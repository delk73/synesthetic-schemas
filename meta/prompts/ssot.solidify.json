{
  "objective": "Remediate audit findings (C5 FAIL, C6 WARN) to solidify SSOT determinism: enforce drift guard in codegen and remove dual-class naming hedges while maintaining CI/local parity.",
  "constraints": {
    "style": "KISS, deterministic, minimal deps",
    "python": "3.11",
    "schema_draft": "2020-12",
    "no_db_migrations": true
  },
  "phases": [
    { "id": "P3", "name": "Deterministic Codegen & CI" },
    { "id": "P4", "name": "Naming/Schema Hygiene & Docs" }
  ],
  "work_items": [
    {
      "id": "R1",
      "phase": "P3",
      "summary": "Fix codegen drift guard to fail on real diffs",
      "deps": [],
      "touches": ["scripts/ensure_codegen_clean.sh"],
      "changes": {
        "ensure_codegen_clean.sh": [
          "Replace 'git diff -I ... -- python/src typescript/src >/dev/null' with 'git diff -I ... --quiet -- python/src typescript/src' (or add '--exit-code').",
          "Keep timestamp-ignoring patterns; retain checkout cleanup for timestamp-only diffs."
        ]
      },
      "acceptance": [
        "On a clean tree after codegen, script exits 0 and prints 'Codegen is clean'.",
        "With uncommitted generated changes, script exits 1 and shows a diff (excluding timestamp-only lines).",
        "CI preflight continues to call this script and fails on drift."
      ],
      "commands": [
        "bash scripts/ensure_codegen_clean.sh",
        "git diff --name-only -- python/src typescript/src"
      ]
    },
    {
      "id": "R2",
      "phase": "P4",
      "summary": "Canonicalize names and remove dual-class hedging",
      "deps": [],
      "touches": [
        "scripts/validate_examples.py",
        "jsonschema/rule-bundle.schema.json",
        "jsonschema/control.schema.json (title only if needed)",
        "README.md",
        "CONTRIBUTING.md"
      ],
      "changes": {
        "decision": "Use canonical names: RuleBundle, ControlBundle, Control. Avoid '*Schema' and 'ControlParameter' in code paths.",
        "validate_examples.py": [
          "Update TOKENS and SCHEMA_TO_MODEL to drop alternates like 'RuleBundle|RuleBundleSchema', 'ControlBundle|ControlBundleSchema', 'Control|ControlParameter'; keep only canonical names.",
          "Adjust imports/class lookups accordingly."
        ],
        "schemas": [
          "If schema 'title' uses '*Schema' (e.g., RuleBundleSchema), rename to canonical (RuleBundle) and run normalization.",
          "Bump version.json if schema content changes; regenerate code (preflight-fix path)."
        ],
        "docs": [
          "Document the naming decision in CONTRIBUTING.md (no dual-class hedging).",
          "Ensure README still reflects preflight and version bump guidance."
        ]
      },
      "acceptance": [
        "`rg -n \"RuleBundleSchema|ControlParameter|ControlBundleSchema\"` returns no matches in repo (excluding meta/ and _skip).",
        "`poetry/conda python` run of `scripts/validate_examples.py --strict --dir examples` passes.",
        "`./preflight.sh` passes locally and in CI after changes."
      ],
      "commands": [
        "rg -n 'RuleBundleSchema|ControlParameter|ControlBundleSchema' --glob '!*meta/**' --glob '!examples/_skip/**'",
        "PYTHONPATH=python/src python scripts/validate_examples.py --strict --dir examples",
        "./preflight.sh"
      ]
    }
  ],
  "parallelization": {
    "P3": ["R1"],
    "P4": ["R2"]
  },
  "done_definition": [
    "scripts/ensure_codegen_clean.sh uses '--quiet' or '--exit-code' and fails on drift",
    "No dual-class naming hedges remain (grep clean)",
    "Preflight passes locally and in CI"
  ]
}
