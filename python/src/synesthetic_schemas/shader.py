# generated by datamodel-codegen:
#   filename:  shader.schema.json

from __future__ import annotations

from typing import Any, Optional

from pydantic import BaseModel, Extra, Field


class InputParameter(BaseModel):
    default: float = Field(..., title='Default')
    max: float = Field(..., title='Max')
    min: float = Field(..., title='Min')
    name: str = Field(..., title='Name')
    parameter: str = Field(..., title='Parameter')
    path: str = Field(..., title='Path')
    smoothingTime: Optional[float] = Field(None, title='Smoothingtime')
    step: Optional[float] = Field(None, title='Step')
    type: str = Field(..., title='Type')


class UniformDef(BaseModel):
    default: Any = Field(..., title='Default')
    name: str = Field(..., title='Name')
    stage: str = Field(..., title='Stage')
    type: str = Field(..., title='Type')


class Shader(BaseModel):
    class Config:
        extra = Extra.forbid

    description: Optional[str] = Field(None, title='Description')
    fragment_shader: str = Field(
        ...,
        description='GLSL fragment shader code',
        examples=['// fragment shader example'],
        title='Fragment Shader',
    )
    input_parameters: Optional[list[InputParameter]] = Field(
        None, title='Input Parameters'
    )
    meta_info: Optional[dict[str, Any]] = Field(
        None,
        description='Metadata about the shader',
        examples=[
            {'category': 'visual', 'complexity': 'low', 'tags': ['circle', 'sdf']}
        ],
        title='Meta Info',
    )
    name: str = Field(
        ..., description='Name of the shader', examples=['Circle Shader'], title='Name'
    )
    uniforms: Optional[list[UniformDef]] = Field(None, title='Uniforms')
    vertex_shader: str = Field(
        ...,
        description='GLSL vertex shader code',
        examples=['// vertex shader example'],
        title='Vertex Shader',
    )
