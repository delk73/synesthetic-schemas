# generated by datamodel-codegen:
#   filename:  tone.schema.json

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List

from pydantic import BaseModel, Extra, Field


class SynthType(Enum):
    Tone_Synth = 'Tone.Synth'
    Tone_PolySynth = 'Tone.PolySynth'
    Tone_MonoSynth = 'Tone.MonoSynth'
    Tone_FMSynth = 'Tone.FMSynth'
    Tone_AMSynth = 'Tone.AMSynth'
    Tone_DuoSynth = 'Tone.DuoSynth'
    Tone_MembraneSynth = 'Tone.MembraneSynth'
    Tone_MetalSynth = 'Tone.MetalSynth'
    Tone_PluckSynth = 'Tone.PluckSynth'


class ToneEffect(BaseModel):
    class Config:
        extra = Extra.allow

    options: Dict[str, Any] = Field(..., title='Options')
    order: int = Field(..., title='Order')
    type: str = Field(..., title='Type')


class ToneMetaInfo(BaseModel):
    class Config:
        extra = Extra.allow

    category: str = Field(..., title='Category')
    complexity: str = Field(..., title='Complexity')
    tags: List[str] = Field(..., title='Tags')


class ToneParameter(BaseModel):
    class Config:
        extra = Extra.allow

    default: Any = Field(..., title='Default')
    max: Any = Field(None, title='Max')
    min: Any = Field(None, title='Min')
    name: str = Field(..., title='Name')
    options: List[str] | None = Field(None, title='Options')
    parameter: str | None = Field(None, title='Parameter')
    path: str = Field(..., title='Path')
    smoothingTime: float | None = Field(None, title='Smoothingtime')
    type: str = Field(..., title='Type')
    unit: str | None = Field(None, title='Unit')


class TonePart(BaseModel):
    class Config:
        extra = Extra.allow

    duration: str = Field(..., title='Duration')
    id: str = Field(..., title='Id')
    loop: bool | None = Field(None, title='Loop')
    pattern: str = Field(..., title='Pattern')
    start: str = Field(..., title='Start')


class TonePattern(BaseModel):
    class Config:
        extra = Extra.allow

    id: str = Field(..., title='Id')
    options: Dict[str, Any] = Field(..., title='Options')
    type: str = Field(..., title='Type')


class ToneSynthOptions(BaseModel):
    class Config:
        extra = Extra.allow

    envelope: Dict[str, Any] = Field(..., title='Envelope')
    filter: Dict[str, Any] | None = Field(None, title='Filter')
    filterEnvelope: Dict[str, Any] | None = Field(None, title='Filterenvelope')
    oscillator: Dict[str, Any] = Field(..., title='Oscillator')
    portamento: float | Dict[str, Any] | None = Field(None, title='Portamento')
    volume: float | Dict[str, Any] = Field(..., title='Volume')


class ToneSynth(BaseModel):
    class Config:
        extra = Extra.allow

    options: ToneSynthOptions | Dict[str, Any] = Field(..., title='Options')
    type: SynthType


class Tone(BaseModel):
    class Config:
        extra = Extra.allow

    description: str | None = Field(
        None, description='Description of the tone', title='Description'
    )
    effects: List[ToneEffect | Dict[str, Any]] | None = Field(
        None, description='Effects configuration', title='Effects'
    )
    input_parameters: List[ToneParameter | Dict[str, Any]] | None = Field(
        None, description='Tone input parameters', title='Input Parameters'
    )
    meta_info: ToneMetaInfo | Dict[str, Any] | None = Field(
        None, description='Additional metadata about the tone', title='Meta Info'
    )
    name: str = Field(..., description='Name of the tone', title='Name')
    parts: List[TonePart | Dict[str, Any]] | None = Field(
        None, description='Parts configuration', title='Parts'
    )
    patterns: List[TonePattern | Dict[str, Any]] | None = Field(
        None, description='Patterns configuration', title='Patterns'
    )
    synth: ToneSynth | Dict[str, Any] = Field(
        ..., description='Synth configuration', title='Synth'
    )
