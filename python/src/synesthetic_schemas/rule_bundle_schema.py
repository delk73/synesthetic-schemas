# generated by datamodel-codegen:
#   filename:  rule-bundle.schema.json

from __future__ import annotations

from datetime import datetime
from typing import Any, Dict, List

from pydantic import BaseModel, Extra, Field


class RuleSchema(BaseModel):
    class Config:
        extra = Extra.forbid

    effects: List[Dict[str, Any]] | None = Field(
        None, description='Effects applied when the rule is triggered', title='Effects'
    )
    execution: str | None = Field(
        None, description='Execution environment for the rule', title='Execution'
    )
    expr: str | Dict[str, Any] | None = Field(
        None, description='Expression defining the rule logic', title='Expr'
    )
    id: str = Field(..., description='Unique rule identifier', title='Id')
    target: str | None = Field(
        None, description='Parameter path the rule targets', title='Target'
    )
    trigger: Dict[str, Any] | None = Field(
        None, description='Trigger configuration for the rule', title='Trigger'
    )


class RuleBundleSchema(BaseModel):
    class Config:
        extra = Extra.forbid

    created_at: datetime | None = Field(
        None, description='Creation time', title='Created At'
    )
    description: str | None = Field(
        None, description='Bundle details', title='Description'
    )
    id: int | None = Field(None, description='Database ID', title='Id')
    meta_info: Dict[str, Any] | None = Field(
        None, description='Metadata about the rule bundle', title='Meta Info'
    )
    name: str = Field(..., description='Human readable bundle name', title='Name')
    rules: List[RuleSchema] = Field(..., description='List of rules', title='Rules')
    updated_at: datetime | None = Field(
        None, description='Last update time', title='Updated At'
    )
