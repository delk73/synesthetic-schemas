# generated by datamodel-codegen:
#   filename:  control.schema.json

from __future__ import annotations

from enum import Enum
from typing import Optional, Union

from pydantic import BaseModel, Extra, Field, constr


class AxisType(Enum):
    mouse_x = 'mouse.x'
    mouse_y = 'mouse.y'
    mouse_wheel = 'mouse.wheel'


class ComboType(BaseModel):
    keys: Optional[list[str]] = Field(None, title='Keys')
    mouseButtons: Optional[list[str]] = Field(None, title='Mousebuttons')
    strict: Optional[bool] = Field(False, title='Strict')
    wheel: Optional[bool] = Field(None, title='Wheel')


class CurveType(Enum):
    linear = 'linear'
    exponential = 'exponential'
    sine = 'sine'
    discrete = 'discrete'


class DataType(Enum):
    float = 'float'
    int = 'int'
    bool = 'bool'
    string = 'string'


class ActionType(BaseModel):
    axis: AxisType
    curve: Optional[CurveType] = None
    scale: Optional[float] = Field(1, title='Scale')
    sensitivity: float = Field(..., title='Sensitivity')


class Mapping(BaseModel):
    action: ActionType
    combo: ComboType


class Control(BaseModel):
    class Config:
        extra = Extra.forbid

    default: Union[float, int, bool, str] = Field(..., title='Default')
    label: constr(min_length=1) = Field(..., title='Label')
    mappings: list[Mapping] = Field(..., title='Mappings')
    max: Optional[float] = Field(None, title='Max')
    min: Optional[float] = Field(None, title='Min')
    options: Optional[list[str]] = Field(None, title='Options')
    parameter: constr(min_length=1) = Field(..., title='Parameter')
    smoothingTime: Optional[float] = Field(0, title='Smoothingtime')
    step: Optional[float] = Field(None, title='Step')
    type: DataType
    unit: constr(min_length=1) = Field(..., title='Unit')
