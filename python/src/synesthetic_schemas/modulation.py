# generated by datamodel-codegen:
#   filename:  modulation.schema.json

from __future__ import annotations

from enum import Enum
from typing import Any, Optional

from pydantic import BaseModel, Extra, Field


class ScaleProfile(Enum):
    linear = 'linear'
    exponential = 'exponential'
    logarithmic = 'logarithmic'
    sine = 'sine'
    cosine = 'cosine'


class Type(Enum):
    additive = 'additive'
    multiplicative = 'multiplicative'


class Waveform(Enum):
    sine = 'sine'
    triangle = 'triangle'
    square = 'square'
    sawtooth = 'sawtooth'


class ModulationItem(BaseModel):
    amplitude: float = Field(
        ..., description='Amplitude of the modulation', title='Amplitude'
    )
    frequency: float = Field(
        ..., description='Frequency of the modulation in Hz', title='Frequency'
    )
    id: str = Field(..., description='Unique identifier for the modulation', title='Id')
    max: Optional[float] = Field(
        None, description='Maximum allowable value for the modulation', title='Max'
    )
    min: Optional[float] = Field(
        None, description='Minimum allowable value for the modulation', title='Min'
    )
    offset: float = Field(
        ..., description='Offset/base value of the modulation', title='Offset'
    )
    phase: float = Field(..., description='Phase offset in radians', title='Phase')
    scale: Optional[float] = Field(
        1, description='Scaling factor applied to the modulation output', title='Scale'
    )
    scaleProfile: Optional[ScaleProfile] = Field(
        None,
        description='Response profile to shape the modulation output',
        title='Scaleprofile',
    )
    target: str = Field(
        ...,
        description="Target parameter path (e.g., 'visual.u_wave_speed', 'tone.filter.frequency')",
        title='Target',
    )
    type: Type = Field(..., description='Type of modulation', title='Type')
    waveform: Waveform = Field(..., description='Waveform type', title='Waveform')


class Modulation(BaseModel):
    class Config:
        extra = Extra.forbid

    description: Optional[str] = Field(
        None, description='Description of the modulation set', title='Description'
    )
    meta_info: Optional[dict[str, Any]] = Field(
        None,
        description='Metadata about the modulation set',
        examples=[
            {
                'category': 'modulation',
                'complexity': 'medium',
                'tags': ['multimodal', 'dynamic'],
            }
        ],
        title='Meta Info',
    )
    modulations: list[ModulationItem] = Field(
        ...,
        description='List of modulations',
        examples=[
            {
                'amplitude': 0.5,
                'frequency': 0.5,
                'id': 'wave_speed_pulse',
                'max': 1,
                'min': 0,
                'offset': 1,
                'phase': 0,
                'scale': 1,
                'scaleProfile': 'linear',
                'target': 'visual.u_wave_speed',
                'type': 'additive',
                'waveform': 'triangle',
            },
            {
                'amplitude': 400,
                'frequency': 0.25,
                'id': 'filter_sweep',
                'max': 1,
                'min': 0,
                'offset': 800,
                'phase': 0,
                'scale': 1,
                'scaleProfile': 'exponential',
                'target': 'tone.filter.frequency',
                'type': 'additive',
                'waveform': 'triangle',
            },
            {
                'amplitude': 0.2,
                'frequency': 1,
                'id': 'haptic_pulse',
                'max': 1,
                'min': 0,
                'offset': 0.6,
                'phase': 0,
                'scale': 1,
                'scaleProfile': 'linear',
                'target': 'haptic.intensity',
                'type': 'additive',
                'waveform': 'sine',
            },
        ],
        title='Modulations',
    )
    name: str = Field(..., description='Name of the modulation set', title='Name')
