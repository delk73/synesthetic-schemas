# generated by datamodel-codegen:
#   filename:  synesthetic-asset.schema.json

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Optional, Union

from pydantic import BaseModel, Extra, Field, constr


class DataType(Enum):
    float = 'float'
    int = 'int'
    bool = 'bool'
    string = 'string'


class HapticParameter(BaseModel):
    default: Any = Field(..., description='Default value', title='Default')
    max: Optional[float] = Field(None, description='Maximum allowed value', title='Max')
    min: Optional[float] = Field(None, description='Minimum allowed value', title='Min')
    name: str = Field(..., description='Name of the parameter', title='Name')
    options: Optional[list[str]] = Field(
        None, description='Available options for enum types', title='Options'
    )
    parameter: str = Field(..., description='The parameter', title='Parameter')
    path: str = Field(..., description='Path to the parameter', title='Path')
    smoothingTime: Optional[float] = Field(
        None, description='Smoothing time in seconds', title='Smoothingtime'
    )
    step: Optional[float] = Field(
        None, description='Step increment value', title='Step'
    )
    type: str = Field(..., description='Data type of the parameter', title='Type')
    unit: str = Field(..., description='Unit of measurement', title='Unit')


class ScaleProfile(Enum):
    linear = 'linear'
    exponential = 'exponential'
    logarithmic = 'logarithmic'
    sine = 'sine'
    cosine = 'cosine'


class Type(Enum):
    additive = 'additive'
    multiplicative = 'multiplicative'


class Waveform(Enum):
    sine = 'sine'
    triangle = 'triangle'
    square = 'square'
    sawtooth = 'sawtooth'


class ModulationItem(BaseModel):
    amplitude: float = Field(
        ..., description='Amplitude of the modulation', title='Amplitude'
    )
    frequency: float = Field(
        ..., description='Frequency of the modulation in Hz', title='Frequency'
    )
    id: str = Field(..., description='Unique identifier for the modulation', title='Id')
    max: Optional[float] = Field(
        None, description='Maximum allowable value for the modulation', title='Max'
    )
    min: Optional[float] = Field(
        None, description='Minimum allowable value for the modulation', title='Min'
    )
    offset: float = Field(
        ..., description='Offset/base value of the modulation', title='Offset'
    )
    phase: float = Field(..., description='Phase offset in radians', title='Phase')
    scale: Optional[float] = Field(
        1, description='Scaling factor applied to the modulation output', title='Scale'
    )
    scaleProfile: Optional[ScaleProfile] = Field(
        None,
        description='Response profile to shape the modulation output',
        title='Scaleprofile',
    )
    target: str = Field(
        ...,
        description="Target parameter path (e.g., 'visual.u_wave_speed', 'tone.filter.frequency')",
        title='Target',
    )
    type: Type = Field(..., description='Type of modulation', title='Type')
    waveform: Waveform = Field(..., description='Waveform type', title='Waveform')


class Rule(BaseModel):
    class Config:
        extra = Extra.forbid

    effects: Optional[list[dict[str, Any]]] = Field(
        None, description='Effects applied when the rule is triggered', title='Effects'
    )
    execution: Optional[str] = Field(
        None, description='Execution environment for the rule', title='Execution'
    )
    expr: Optional[Union[str, dict[str, Any]]] = Field(
        None, description='Expression defining the rule logic', title='Expr'
    )
    id: str = Field(..., description='Unique rule identifier', title='Id')
    target: Optional[str] = Field(
        None, description='Parameter path the rule targets', title='Target'
    )
    trigger: Optional[dict[str, Any]] = Field(
        None, description='Trigger configuration for the rule', title='Trigger'
    )


class InputParameter(BaseModel):
    default: float = Field(..., title='Default')
    max: float = Field(..., title='Max')
    min: float = Field(..., title='Min')
    name: str = Field(..., title='Name')
    parameter: str = Field(..., title='Parameter')
    path: str = Field(..., title='Path')
    smoothingTime: Optional[float] = Field(None, title='Smoothingtime')
    step: Optional[float] = Field(None, title='Step')
    type: str = Field(..., title='Type')


class UniformDef(BaseModel):
    default: Any = Field(..., title='Default')
    name: str = Field(..., title='Name')
    stage: str = Field(..., title='Stage')
    type: str = Field(..., title='Type')


class ToneEffect(BaseModel):
    class Config:
        extra = Extra.allow

    options: dict[str, Any] = Field(..., title='Options')
    order: int = Field(..., title='Order')
    type: str = Field(..., title='Type')


class ToneMetaInfo(BaseModel):
    class Config:
        extra = Extra.allow

    category: str = Field(..., title='Category')
    complexity: str = Field(..., title='Complexity')
    tags: list[str] = Field(..., title='Tags')


class ToneParameter(BaseModel):
    class Config:
        extra = Extra.allow

    default: Any = Field(..., title='Default')
    max: Any = Field(None, title='Max')
    min: Any = Field(None, title='Min')
    name: str = Field(..., title='Name')
    options: Optional[list[str]] = Field(None, title='Options')
    parameter: Optional[str] = Field(None, title='Parameter')
    path: str = Field(..., title='Path')
    smoothingTime: Optional[float] = Field(None, title='Smoothingtime')
    type: str = Field(..., title='Type')
    unit: Optional[str] = Field(None, title='Unit')


class TonePart(BaseModel):
    class Config:
        extra = Extra.allow

    duration: str = Field(..., title='Duration')
    id: str = Field(..., title='Id')
    loop: Optional[bool] = Field(None, title='Loop')
    pattern: str = Field(..., title='Pattern')
    start: str = Field(..., title='Start')


class TonePattern(BaseModel):
    class Config:
        extra = Extra.allow

    id: str = Field(..., title='Id')
    options: dict[str, Any] = Field(..., title='Options')
    type: str = Field(..., title='Type')


class ComboType(BaseModel):
    keys: Optional[list[str]] = Field(None, title='Keys')
    mouseButtons: Optional[list[str]] = Field(None, title='Mousebuttons')
    strict: Optional[bool] = Field(False, title='Strict')
    wheel: Optional[bool] = Field(None, title='Wheel')


class DeviceOptionValue(BaseModel):
    unit: str = Field(
        ..., description='Unit of measurement for the option', title='Unit'
    )
    value: float = Field(..., description='Value of the device option', title='Value')


class SynthType(Enum):
    Tone_Synth = 'Tone.Synth'
    Tone_PolySynth = 'Tone.PolySynth'
    Tone_MonoSynth = 'Tone.MonoSynth'
    Tone_FMSynth = 'Tone.FMSynth'
    Tone_AMSynth = 'Tone.AMSynth'
    Tone_DuoSynth = 'Tone.DuoSynth'
    Tone_MembraneSynth = 'Tone.MembraneSynth'
    Tone_MetalSynth = 'Tone.MetalSynth'
    Tone_PluckSynth = 'Tone.PluckSynth'


class ToneSynthOptions(BaseModel):
    class Config:
        extra = Extra.allow

    envelope: dict[str, Any] = Field(..., title='Envelope')
    filter: Optional[dict[str, Any]] = Field(None, title='Filter')
    filterEnvelope: Optional[dict[str, Any]] = Field(None, title='Filterenvelope')
    oscillator: dict[str, Any] = Field(..., title='Oscillator')
    portamento: Optional[Union[float, dict[str, Any]]] = Field(None, title='Portamento')
    volume: Union[float, dict[str, Any]] = Field(..., title='Volume')


class AxisType(Enum):
    mouse_x = 'mouse.x'
    mouse_y = 'mouse.y'
    mouse_wheel = 'mouse.wheel'


class CurveType(Enum):
    linear = 'linear'
    exponential = 'exponential'
    sine = 'sine'
    discrete = 'discrete'


class Modulation(BaseModel):
    class Config:
        extra = Extra.forbid

    description: Optional[str] = Field(
        None, description='Description of the modulation set', title='Description'
    )
    meta_info: Optional[dict[str, Any]] = Field(
        None,
        description='Metadata about the modulation set',
        examples=[
            {
                'category': 'modulation',
                'complexity': 'medium',
                'tags': ['multimodal', 'dynamic'],
            }
        ],
        title='Meta Info',
    )
    modulations: list[ModulationItem] = Field(
        ...,
        description='List of modulations',
        examples=[
            {
                'amplitude': 0.5,
                'frequency': 0.5,
                'id': 'wave_speed_pulse',
                'max': 1,
                'min': 0,
                'offset': 1,
                'phase': 0,
                'scale': 1,
                'scaleProfile': 'linear',
                'target': 'visual.u_wave_speed',
                'type': 'additive',
                'waveform': 'triangle',
            },
            {
                'amplitude': 400,
                'frequency': 0.25,
                'id': 'filter_sweep',
                'max': 1,
                'min': 0,
                'offset': 800,
                'phase': 0,
                'scale': 1,
                'scaleProfile': 'exponential',
                'target': 'tone.filter.frequency',
                'type': 'additive',
                'waveform': 'triangle',
            },
            {
                'amplitude': 0.2,
                'frequency': 1,
                'id': 'haptic_pulse',
                'max': 1,
                'min': 0,
                'offset': 0.6,
                'phase': 0,
                'scale': 1,
                'scaleProfile': 'linear',
                'target': 'haptic.intensity',
                'type': 'additive',
                'waveform': 'sine',
            },
        ],
        title='Modulations',
    )
    name: str = Field(..., description='Name of the modulation set', title='Name')


class RuleBundle(BaseModel):
    class Config:
        extra = Extra.forbid

    created_at: Optional[datetime] = Field(
        None, description='Creation time', title='Created At'
    )
    description: Optional[str] = Field(
        None, description='Bundle details', title='Description'
    )
    id: Optional[int] = Field(None, description='Database ID', title='Id')
    meta_info: Optional[dict[str, Any]] = Field(
        None, description='Metadata about the rule bundle', title='Meta Info'
    )
    name: str = Field(..., description='Human readable bundle name', title='Name')
    rules: list[Rule] = Field(..., description='List of rules', title='Rules')
    updated_at: Optional[datetime] = Field(
        None, description='Last update time', title='Updated At'
    )


class Shader(BaseModel):
    class Config:
        extra = Extra.forbid

    description: Optional[str] = Field(None, title='Description')
    fragment_shader: str = Field(
        ...,
        description='GLSL fragment shader code',
        examples=['// fragment shader example'],
        title='Fragment Shader',
    )
    input_parameters: Optional[list[InputParameter]] = Field(
        None, title='Input Parameters'
    )
    meta_info: Optional[dict[str, Any]] = Field(
        None,
        description='Metadata about the shader',
        examples=[
            {'category': 'visual', 'complexity': 'low', 'tags': ['circle', 'sdf']}
        ],
        title='Meta Info',
    )
    name: str = Field(
        ..., description='Name of the shader', examples=['Circle Shader'], title='Name'
    )
    uniforms: Optional[list[UniformDef]] = Field(None, title='Uniforms')
    vertex_shader: str = Field(
        ...,
        description='GLSL vertex shader code',
        examples=['// vertex shader example'],
        title='Vertex Shader',
    )


class DeviceConfig(BaseModel):
    options: dict[str, DeviceOptionValue] = Field(
        ..., description='Device-specific configuration options', title='Options'
    )
    type: str = Field(..., description='Type of haptic device', title='Type')


class ToneSynth(BaseModel):
    class Config:
        extra = Extra.allow

    options: Union[ToneSynthOptions, dict[str, Any]] = Field(..., title='Options')
    type: SynthType


class ActionType(BaseModel):
    axis: AxisType
    curve: Optional[CurveType] = None
    scale: Optional[float] = Field(1, title='Scale')
    sensitivity: float = Field(..., title='Sensitivity')


class Haptic(BaseModel):
    description: Optional[str] = Field(
        None, description='Description of the haptic configuration', title='Description'
    )
    device: DeviceConfig = Field(..., description='Device configuration')
    input_parameters: list[HapticParameter] = Field(
        ..., description='List of input parameters', title='Input Parameters'
    )
    meta_info: Optional[dict[str, Any]] = Field(
        None,
        description='Metadata about the haptic configuration',
        examples=[
            {
                'category': 'haptic',
                'complexity': 'medium',
                'tags': ['vibration', 'feedback'],
            }
        ],
        title='Meta Info',
    )
    name: str = Field(..., description='Name of the haptic configuration', title='Name')


class Tone(BaseModel):
    class Config:
        extra = Extra.allow

    description: Optional[str] = Field(
        None, description='Description of the tone', title='Description'
    )
    effects: Optional[list[Union[ToneEffect, dict[str, Any]]]] = Field(
        None, description='Effects configuration', title='Effects'
    )
    input_parameters: Optional[list[Union[ToneParameter, dict[str, Any]]]] = Field(
        None, description='Tone input parameters', title='Input Parameters'
    )
    meta_info: Optional[Union[ToneMetaInfo, dict[str, Any]]] = Field(
        None, description='Additional metadata about the tone', title='Meta Info'
    )
    name: str = Field(..., description='Name of the tone', title='Name')
    parts: Optional[list[Union[TonePart, dict[str, Any]]]] = Field(
        None, description='Parts configuration', title='Parts'
    )
    patterns: Optional[list[Union[TonePattern, dict[str, Any]]]] = Field(
        None, description='Patterns configuration', title='Patterns'
    )
    synth: Union[ToneSynth, dict[str, Any]] = Field(
        ..., description='Synth configuration', title='Synth'
    )


class Mapping(BaseModel):
    action: ActionType
    combo: ComboType


class ControlParameter(BaseModel):
    class Config:
        extra = Extra.forbid

    default: Union[float, int, bool, str] = Field(..., title='Default')
    label: constr(min_length=1) = Field(..., title='Label')
    mappings: list[Mapping] = Field(..., title='Mappings')
    max: Optional[float] = Field(None, title='Max')
    min: Optional[float] = Field(None, title='Min')
    options: Optional[list[str]] = Field(None, title='Options')
    parameter: constr(min_length=1) = Field(..., title='Parameter')
    smoothingTime: Optional[float] = Field(0, title='Smoothingtime')
    step: Optional[float] = Field(None, title='Step')
    type: DataType
    unit: constr(min_length=1) = Field(..., title='Unit')


class Control(BaseModel):
    class Config:
        extra = Extra.forbid

    control_parameters: list[ControlParameter] = Field(..., title='Control Parameters')
    description: Optional[str] = Field(None, title='Description')
    meta_info: Optional[dict[str, Any]] = Field(None, title='Meta Info')
    name: str = Field(..., title='Name')


class SynestheticAsset(BaseModel):
    class Config:
        extra = Extra.forbid

    control: Optional[Control] = None
    created_at: Optional[datetime] = None
    description: Optional[str] = Field(
        None,
        description="Description of the asset's purpose",
        examples=[
            'A circle that pulses and changes color and sound frequency based on user controls'
        ],
        title='Description',
    )
    haptic: Optional[Haptic] = None
    meta_info: Optional[dict[str, Any]] = Field(
        None,
        description='Metadata about the asset',
        examples=[
            {
                'category': 'visual',
                'complexity': 'medium',
                'tags': ['geometric', 'reactive', 'audio'],
            }
        ],
        title='Meta Info',
    )
    modulation: Optional[Modulation] = None
    modulations: Optional[list[ModulationItem]] = Field(
        None,
        description='Array of modulations for this asset',
        examples=[
            {
                'amplitude': 0.5,
                'frequency': 0.5,
                'id': 'wave_speed_pulse',
                'max': 1,
                'min': 0,
                'offset': 1,
                'phase': 0,
                'scale': 1,
                'scaleProfile': 'linear',
                'target': 'visual.u_wave_speed',
                'type': 'additive',
                'waveform': 'triangle',
            }
        ],
        title='Modulations',
    )
    name: constr(min_length=1) = Field(
        ...,
        description='Name of the synesthetic asset',
        examples=['Circle Pulsar'],
        title='Name',
    )
    rule_bundle: Optional[RuleBundle] = Field(
        None,
        example={
            'description': 'A rule that maps interactions on a virtual grid to multimodal outputs by defining channels that link grid pressure to parameter changes.',
            'meta_info': {
                'category': 'rule_bundle',
                'complexity': 'high',
                'tags': ['grid', 'interaction', 'multimodal', 'mapping', 'client-side'],
            },
            'name': 'SDF Grid Rules',
            'rules': [
                {
                    'effects': [
                        {
                            'channel': 'audioTrigger',
                            'op': 'triggerAttackRelease',
                            'target': 'tone.synth',
                            'value': {
                                'duration': '8n',
                                'note': '<grid.note>',
                                'velocity': {
                                    'curve': 'linear',
                                    'scale': 1,
                                    'source': 'grid.pressure',
                                    'threshold': 0.02,
                                },
                            },
                        }
                    ],
                    'execution': 'client',
                    'id': 'grid_to_multimodal_mapping',
                    'trigger': {
                        'params': {'cooldown': 100, 'gridSize': 8},
                        'type': 'grid_cell',
                    },
                }
            ],
        },
        title='rule-bundle',
    )
    shader: Optional[Shader] = None
    tone: Optional[Tone] = None
    updated_at: Optional[datetime] = None
