# generated by datamodel-codegen:
#   filename:  rule.schema.json

from __future__ import annotations

from typing import Any, Optional, Union

from pydantic import BaseModel, Extra, Field


class Rule(BaseModel):
    class Config:
        extra = Extra.forbid

    effects: Optional[list[dict[str, Any]]] = Field(
        None, description='Effects applied when the rule is triggered', title='Effects'
    )
    execution: Optional[str] = Field(
        None, description='Execution environment for the rule', title='Execution'
    )
    expr: Optional[Union[str, dict[str, Any]]] = Field(
        None, description='Expression defining the rule logic', title='Expr'
    )
    id: str = Field(..., description='Unique rule identifier', title='Id')
    target: Optional[str] = Field(
        None, description='Parameter path the rule targets', title='Target'
    )
    trigger: Optional[dict[str, Any]] = Field(
        None, description='Trigger configuration for the rule', title='Trigger'
    )
