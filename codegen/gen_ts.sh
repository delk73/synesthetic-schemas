#!/usr/bin/env bash
set -euo pipefail

ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

# 1) Bundle schemas locally (no network)
# This uses Node.js from the Nix shell. This is correct.
node "$ROOT/codegen/ts_bundle.mjs"

# 2) Generate TS from bundled schemas using repo-local tooling
OUT_DIR="$ROOT/typescript/src"
IN_DIR="$ROOT/typescript/tmp/bundled"

mkdir -p "$OUT_DIR"

# Clean old outputs so stale files never linger
rm -f "$OUT_DIR"/*.d.ts "$OUT_DIR"/*.tsbuildinfo

# Use 'npx' to run the project-local binary.
# npx automatically finds the executable in ./node_modules/.bin
# This is the modern, standard way and removes the need for manual checks.
# 'build.sh' already ensures 'npm install' has been run.
for f in "$IN_DIR"/*.schema.json; do
  base=$(basename "$f" .schema.json)
  npx json2ts "$f" > "$OUT_DIR/$base.d.ts"
  echo "generated: $base.d.ts"
done

# 3) Generate index.d.ts that re-exports all generated declaration files
INDEX_FILE="$OUT_DIR/index.d.ts"
{
  echo "/* Autogenerated: aggregate exports for schema types */"
  for f in $(ls -1 "$OUT_DIR"/*.d.ts | sort); do
    b=$(basename "$f" .d.ts)
    # Skip self to avoid recursive export if rerun
    if [[ "$b" == "index" ]]; then continue; fi
    echo "export * from './$b';"
  done
} > "$INDEX_FILE"
echo "updated: index.d.ts"