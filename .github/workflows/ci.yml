name: CI (Fast)

on:
  push:
    branches: [ main, master ]
  pull_request:

env:
  # Performance optimization: Use lightweight Python/Node setup by default.
  # Set to 1 only when testing Nix reproducibility is required.
  RUN_FULL_NIX: 0

jobs:
  preflight:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix and configure Cachix
        if: env.RUN_FULL_NIX == '1'
        uses: cachix/install-nix-action@v26
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
          # Performance: Cachix binary cache avoids 20+ min Nix builds
          cachix_name: synesthetic
          cachix_auth_token: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Setup Python 3.11 (non-Nix)
        if: env.RUN_FULL_NIX != '1'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry (non-Nix)
        if: env.RUN_FULL_NIX != '1'
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          export PATH="$HOME/.local/bin:$PATH"

      - name: Setup Node.js 20 (non-Nix)
        if: env.RUN_FULL_NIX != '1'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache Poetry virtual environment
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install project dependencies (Nix)
        if: env.RUN_FULL_NIX == '1'
        run: |
          nix develop --command bash -c "
            echo '--- Installing project dependencies for CI ---'
            poetry install
            npm install
          "

      - name: Install project dependencies (non-Nix)
        if: env.RUN_FULL_NIX != '1'
        run: |
          # Configure Poetry for faster, more deterministic CI runs
          poetry config virtualenvs.in-project true --local
          poetry config virtualenvs.prefer-active-python true --local
          poetry config installer.parallel true --local
          
          # Install dependencies (dev dependencies needed for tools like ruff, pydantic)
          poetry install --ansi
          npm ci

      - name: Check for codegen-related file changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            codegen:
              - 'jsonschema/**'
              - 'codegen/**'
              - 'scripts/**'
              - 'pyproject.toml'
              - 'poetry.lock'
              - 'package.json'
              - 'package-lock.json'
              - 'Makefile'

      - name: Run preflight (with codegen-check) [Nix]
        if: env.RUN_FULL_NIX == '1' && steps.changes.outputs.codegen == 'true'
        run: |
          nix develop --command ./preflight.sh

      - name: Run preflight (with codegen-check) [non-Nix]
        if: env.RUN_FULL_NIX != '1' && steps.changes.outputs.codegen == 'true'
        run: |
          ./preflight.sh

      - name: Run preflight (skip codegen-check) [Nix]
        if: env.RUN_FULL_NIX == '1' && steps.changes.outputs.codegen != 'true'
        run: |
          nix develop --command bash -c "SKIP_CODEGEN_CHECK=1 ./preflight.sh"

      - name: Run preflight (skip codegen-check) [non-Nix]
        if: env.RUN_FULL_NIX != '1' && steps.changes.outputs.codegen != 'true'
        run: |
          SKIP_CODEGEN_CHECK=1 ./preflight.sh
