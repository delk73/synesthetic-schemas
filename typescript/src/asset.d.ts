/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type ControlParameters =
  | {
      [k: string]: unknown;
    }[]
  | null;
export type Description = string | null;
export type MetaInfo = {
  [k: string]: unknown;
} | null;
export type Name = string;
export type ControlParameters1 =
  | {
      [k: string]: unknown;
    }[]
  | null;
export type CreatedAt = string;
/**
 * Description of the asset's purpose
 */
export type Description1 = string | null;
export type Description2 = string | null;
export type Device = {
  [k: string]: unknown;
} | null;
export type InputParameters =
  | {
      [k: string]: unknown;
    }[]
  | null;
export type MetaInfo1 = {
  [k: string]: unknown;
} | null;
export type Name1 = string;
/**
 * Metadata about the asset
 */
export type MetaInfo2 = {
  [k: string]: unknown;
} | null;
/**
 * Description of the modulation set
 */
export type Description3 = string | null;
/**
 * Metadata about the modulation set
 */
export type MetaInfo3 = {
  [k: string]: unknown;
} | null;
export type ModulationId = number;
/**
 * Amplitude of the modulation
 */
export type Amplitude = number;
/**
 * Frequency of the modulation in Hz
 */
export type Frequency = number;
/**
 * Unique identifier for the modulation
 */
export type Id = string;
/**
 * Maximum allowable value for the modulation
 */
export type Max = number | null;
/**
 * Minimum allowable value for the modulation
 */
export type Min = number | null;
/**
 * Offset/base value of the modulation
 */
export type Offset = number;
/**
 * Phase offset in radians
 */
export type Phase = number;
/**
 * Scaling factor applied to the modulation output
 */
export type Scale = number;
/**
 * Response profile to shape the modulation output
 */
export type Scaleprofile = "linear" | "exponential" | "logarithmic" | "sine" | "cosine";
/**
 * Target parameter path (e.g., 'visual.u_wave_speed', 'tone.filter.frequency')
 */
export type Target = string;
/**
 * Type of modulation
 */
export type Type = "additive" | "multiplicative";
/**
 * Waveform type
 */
export type Waveform = "sine" | "triangle" | "square" | "sawtooth";
/**
 * List of modulations
 */
export type Modulations = ModulationItem[];
/**
 * Name of the modulation set
 */
export type Name2 = string;
/**
 * Array of modulations for this asset
 */
export type Modulations1 =
  | {
      [k: string]: unknown;
    }[]
  | null;
/**
 * Name of the synesthetic asset
 */
export type Name3 = string;
export type Description4 = string | null;
export type FragmentShader = string;
export type InputParameters1 =
  | {
      [k: string]: unknown;
    }[]
  | null;
export type MetaInfo4 = {
  [k: string]: unknown;
} | null;
export type Name4 = string;
export type ShaderLibId = number | null;
export type Uniforms =
  | {
      [k: string]: unknown;
    }[]
  | null;
export type VertexShader = string;
export type Description5 = string | null;
export type Effects =
  | {
      [k: string]: unknown;
    }[]
  | null;
export type InputParameters2 = {
  [k: string]: unknown;
}[];
export type MetaInfo5 = {
  [k: string]: unknown;
} | null;
export type Name5 = string;
export type Parts =
  | {
      [k: string]: unknown;
    }[]
  | null;
export type Patterns =
  | {
      [k: string]: unknown;
    }[]
  | null;
export type UpdatedAt = string;

export interface SynestheticAsset {
  control?: NestedControlResponse | null;
  control_parameters?: ControlParameters1;
  created_at: CreatedAt;
  description?: Description1;
  haptic?: NestedHapticResponse | null;
  meta_info?: MetaInfo2;
  modulation?: Modulation | null;
  modulations?: Modulations1;
  name: Name3;
  shader?: NestedShaderResponse | null;
  tone?: NestedToneResponse | null;
  updated_at: UpdatedAt;
}
export interface NestedControlResponse {
  control_parameters?: ControlParameters;
  description?: Description;
  meta_info?: MetaInfo;
  name: Name;
  [k: string]: unknown;
}
export interface NestedHapticResponse {
  description?: Description2;
  device?: Device;
  input_parameters?: InputParameters;
  meta_info?: MetaInfo1;
  name: Name1;
  [k: string]: unknown;
}
export interface Modulation {
  description?: Description3;
  meta_info?: MetaInfo3;
  modulation_id: ModulationId;
  modulations: Modulations;
  name: Name2;
  [k: string]: unknown;
}
export interface ModulationItem {
  amplitude: Amplitude;
  frequency: Frequency;
  id: Id;
  max?: Max;
  min?: Min;
  offset: Offset;
  phase: Phase;
  scale?: Scale;
  scaleProfile?: Scaleprofile;
  target: Target;
  type: Type;
  waveform: Waveform;
  [k: string]: unknown;
}
export interface NestedShaderResponse {
  description?: Description4;
  fragment_shader: FragmentShader;
  input_parameters?: InputParameters1;
  meta_info?: MetaInfo4;
  name: Name4;
  shader_lib_id?: ShaderLibId;
  uniforms?: Uniforms;
  vertex_shader: VertexShader;
  [k: string]: unknown;
}
export interface NestedToneResponse {
  description?: Description5;
  effects?: Effects;
  input_parameters?: InputParameters2;
  meta_info?: MetaInfo5;
  name: Name5;
  parts?: Parts;
  patterns?: Patterns;
  synth: Synth;
  [k: string]: unknown;
}
export interface Synth {
  [k: string]: unknown;
}
